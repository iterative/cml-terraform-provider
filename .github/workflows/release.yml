name: Release
on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        required: true
        description: Bump version number
        options: [major, minor, patch]
        default: patch
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - run: |
          printenv TERRAFORM_REGISTRY_GPG_PRIVATE_KEY | gpg --import
        env:
          TERRAFORM_REGISTRY_GPG_PRIVATE_KEY: ${{ secrets.TERRAFORM_REGISTRY_GPG_PRIVATE_KEY }}
      - run: |
          go install github.com/FalcoSuessgott/tago@v1.4.0
          tago --${{ github.event.inputs.bump }}
      - uses: goreleaser/goreleaser-action@v3
        with:
          args: release
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - if: failure()
        run: >
          curl "$SLACK_WEBHOOK"
          --header 'Content-type: application/json'
          --data '{"text": "Release of <https://github.com/iterative/terraform-provider-iterative|terraform-provider-iterative> failed!"}'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  synchronize:
    # Empyrically equivalent to pressing the "Resync" button in the Settings
    # page of Terraform Registry, but without bothering humans in the process
    # https://registry.terraform.io/providers/iterative/iterative/latest/settings
    # https://www.terraform.io/docs/registry/providers/publishing.html#webhooks
    needs: release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: hashicorp/setup-terraform@v1
    - run: |
        cat <<END > main.tf
          terraform {
            required_providers {
              iterative = {
                source  = "iterative/iterative",
                version = "${GITHUB_REF##refs/tags/v}"
              }
            }
          }
          provider "iterative" {}
        END
    - run: |
        while ! terraform init; do
          sleep $((2**++try))
        done
