// Code generated for package iterative by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../environment/ami.pkr.hcl
// ../environment/setup.sh
package iterative

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _EnvironmentAmiPkrHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\xc4\x1e\xda\xa0\x94\x65\x35\x1b\xc7\x06\xdc\x43\x17\xbd\x6d\x7a\xeb\x69\x11\x08\x63\x6a\x2c\x11\xa5\x48\x95\x1f\x4a\x93\x20\xff\xbd\x20\x29\x59\x92\xe3\xe4\x58\x03\x3e\xe8\xcd\xe3\x9b\xe1\xf0\xcd\x74\xc0\xff\x46\x43\x5e\x57\x84\x18\xfc\xc7\x0b\x83\x55\xd9\x49\x5f\x0b\x65\x23\x48\x08\xb4\xf0\xa2\x15\x39\x0c\x9f\x84\xf4\x68\xac\x88\x08\xfd\xed\x40\x36\x59\x9e\xe5\x74\x08\x59\xed\x0d\x47\x12\x42\xb5\x70\x8d\x3f\x66\x5c\xb7\xeb\x06\x6c\x23\xb8\x36\xdd\x3a\x69\x25\xf6\xdb\x2a\xfc\xdf\x56\xab\x1e\x8c\x80\xa3\xc4\x94\x50\xb4\x50\x63\xa9\xa0\x45\x32\xfc\x0e\x84\x0a\x87\x06\x9c\xe8\x91\xf1\x56\xd2\x33\xab\x42\xcb\x8d\xe8\xdc\x50\xcd\xb7\x87\xef\xe4\xa7\x6f\x5a\x39\xa1\xbc\xf6\x96\x3c\x00\x6f\x84\x42\xf2\x1d\xc1\x28\xa1\xea\x9f\xc9\x5f\x47\xaf\x9c\x27\x9b\xfb\x2c\xbf\xa5\xef\x73\xc3\x93\x2d\x8f\x5e\xc8\xaa\x34\x58\x07\xd1\x73\x01\xde\xb2\x27\xb4\x8e\x6d\xe8\x82\x26\x94\x75\xa0\x38\x8e\xb4\xba\xc8\x8a\x7f\x25\x98\x1a\x97\x3c\x1f\xf3\x96\xb1\xea\xc0\xbb\x49\x00\xbb\x61\xb1\x14\x06\x6d\x75\x77\xcb\x2c\x9a\x1e\x0d\xbb\xf9\xa0\x32\xa3\x25\x96\x16\x6d\x68\x7e\x6a\xd0\x81\x50\xde\x4a\x96\xde\x90\x0d\x21\x3a\xa7\x83\x19\x2f\x91\x0a\x04\xa3\xf6\xf0\x64\xf7\x02\xda\xfd\xbe\xb8\xcb\xb7\x77\xf9\xfd\xae\xb8\xcf\x8b\x7d\xa0\xaf\x27\xb5\x51\xc5\xfa\xa3\x42\x57\x8a\x6a\xae\x92\x40\x96\xef\x4e\x1c\xf2\xfb\xdb\xcd\x8e\x17\xa7\xfc\xeb\xf6\xeb\xf9\x10\x72\x6f\x84\x7b\x2e\x6b\xa3\x7d\x17\x0e\x87\x43\x35\xcb\x8f\xdb\xea\xb4\xad\x76\xa7\x5d\x5e\x70\xd8\x22\x8f\x37\x95\x9a\x83\x9c\xae\xe9\xa0\xb6\x67\xb7\x3d\x80\x82\x1a\xab\xdf\x9f\x53\xe2\xa9\x36\x42\xfe\x5c\x58\xa4\x07\x93\x4d\xd6\x89\x84\x3f\x54\x2f\x8c\x56\x2d\x2a\x17\xcf\x1a\x5d\xd1\xe8\xb9\xb1\x41\x28\x11\x2c\x0e\x6f\x1d\x72\xfe\x88\xe7\x28\x9c\x98\xd5\xde\x35\x6c\x43\x7f\x19\x90\x8e\x21\xc4\xe7\x9f\x00\xa5\x8d\x6b\x3e\x41\x8b\xab\xe8\xaf\x33\xf4\x7d\x92\x88\xbc\xd3\x9c\xd0\xb3\x26\x07\xc6\x51\x39\x03\x72\x62\xa2\xbf\x8a\xc5\xdc\x0b\xe4\x22\x2f\xfa\xd1\xdb\x17\x40\x71\x09\x9c\x8b\x6f\xf1\x52\xc4\xc2\x45\x87\xbc\xfd\x00\x28\x66\xc0\x32\xef\x08\x14\xe1\x99\x1e\x83\x35\x2a\x70\x40\x68\xda\x1a\x0c\x5a\x41\x09\x4d\x93\x43\x87\x8d\x35\x4d\x69\xb2\xc0\xe5\x04\xaf\x08\xd1\x4f\x0a\x8d\x1d\x49\x3f\x68\xbe\xdb\x6d\x8b\x7c\x93\xef\x6e\xb7\x5b\xfa\xb8\x22\xa4\xd5\xd6\x95\x06\x79\xf2\x89\x33\x1e\x83\x43\x4e\x42\xba\x70\x6e\x74\xe2\x7c\x23\xcd\x46\x21\x95\xb3\x8e\xd6\xb3\xeb\x2f\xaf\xcb\x22\xe6\x73\xff\x96\x6c\x6b\xb4\x76\xac\xc2\x5e\x70\x64\xee\xb9\xc3\x41\x07\x8f\x36\xc5\x7b\x61\x9c\x07\x29\x5e\x20\xac\xb5\x44\x39\x10\xda\xf4\xed\x64\x5e\x6b\x7d\x8b\x71\xc0\x87\xe2\x16\xb3\x3e\x75\x62\x84\x23\xe7\x62\x73\x2c\x38\xf3\xd8\xb8\x96\x87\x5d\x3e\x76\x3f\x14\x48\x68\x02\x53\xf7\xa1\x15\x69\xc0\x67\xcd\x05\x29\x63\x4f\x43\x4c\x7d\x3e\xa0\x81\xb2\x5c\xe0\x13\x65\x86\x0f\xcc\x71\x48\x93\x58\x5c\x19\xd9\x95\x21\x5e\x5d\xb8\xe2\x13\x5f\x8c\xbb\xbb\x1c\x5a\xbc\xa4\x8d\xd1\x20\x98\x2e\x5d\x42\x2b\x92\x60\x70\x65\x36\x99\x32\x4b\xaf\x9c\x89\x2a\x70\x6d\x53\x7a\x8b\x26\x5d\xfe\x6c\x10\x1a\x75\xae\xac\xc5\x31\xeb\xbb\x58\xe0\x5f\xd9\xbd\x67\xfe\x18\x8b\x5e\xd5\xa1\xbe\x0a\x25\x3a\x2c\xad\x82\xce\x36\xfa\xec\xe5\x29\x1c\xae\x6e\x1d\x9a\x51\x6b\xb4\x7a\xdc\xb8\x0b\x5b\x4f\xfd\x0d\xb1\xd0\x53\xaf\xca\x39\xed\x03\x4a\xaf\x65\x70\xe6\xb0\xc2\x2f\x28\xff\x9b\x73\xe3\x0b\x46\xfd\xf4\x72\x71\xb5\x0f\xd6\xcd\x26\x3b\x67\x83\x99\x1f\x43\x65\x9d\xd1\xbd\x08\x4a\x68\x08\xb5\x0d\x4a\x49\x87\x0a\x93\x13\xc3\x53\x7e\x79\xed\xc0\x35\x59\x98\xe0\xb7\xb5\x45\xe7\xbb\xcc\x36\x74\xc8\xfa\x5f\x00\x00\x00\xff\xff\x51\x08\x44\x06\x49\x09\x00\x00")

func EnvironmentAmiPkrHclBytes() ([]byte, error) {
	return bindataRead(
		_EnvironmentAmiPkrHcl,
		"../environment/ami.pkr.hcl",
	)
}

func EnvironmentAmiPkrHcl() (*asset, error) {
	bytes, err := EnvironmentAmiPkrHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../environment/ami.pkr.hcl", size: 2377, mode: os.FileMode(438), modTime: time.Unix(1649760632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _EnvironmentSetupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xc1\x6e\xdc\x36\x10\xbd\xeb\x2b\xa6\xdb\x20\x68\x0f\x43\x39\x69\x9c\xb6\x1b\xf8\xe0\x22\x4e\x10\x34\x70\x8a\x36\x97\x22\x09\x0c\x8a\x1c\x49\xac\x29\x92\xe0\x0c\xd7\xd9\xa2\x1f\x5f\x48\xab\xd5\xee\x02\x89\xe1\x1c\x74\xe1\xbc\x37\x9c\x99\xf7\x38\xfa\xbe\x6e\x5c\xa8\xb9\xaf\x5e\xbd\x79\x7b\x75\x51\x6f\x74\xae\x7d\xec\x6a\x33\xf8\x1b\x16\x6d\x6e\x95\x8f\x5d\xe5\x5a\xf8\x00\xdf\x01\xb6\xb0\x7a\x34\xe2\x56\xf0\xe9\x05\x48\x4f\xa1\x02\x78\x79\xf5\xdb\x9b\xcb\xeb\x9b\x57\x7f\xbe\xbb\x7e\x7f\x75\xfd\xf2\x22\xc4\xe0\x82\x50\xd6\x46\xdc\x86\x2a\x00\x32\x7d\x84\xd5\xe5\x1f\xef\xd7\xeb\xd7\x24\xeb\xf5\x25\x73\x19\x08\xff\x26\x86\x8f\x2b\xc9\x85\x3e\xae\x5e\xac\xe0\x3f\xe0\x62\x23\x08\x11\xa0\x86\x9a\xc4\xd4\x3a\xc9\xf8\x29\x13\x43\xab\x6c\xfd\xeb\x99\x9e\x98\x5b\xe2\xaa\x82\x1d\x5c\x27\x81\x4c\x43\xdc\x10\x94\xa0\x45\x28\x58\xb2\x58\x52\x97\xb5\x25\x1e\x51\x5b\x16\x1a\x8c\x78\xb0\x8e\x75\xe3\x69\xa4\xa0\xd5\xce\x6f\xf7\x30\xc5\x94\x37\xce\xd0\x21\xa9\xb5\x38\xa2\x32\xa5\xc8\x4e\x62\xde\x42\x09\x6e\x43\x99\x09\x70\x7b\x0f\x2a\x25\xbd\xee\x9c\xa0\x89\x99\xea\x94\xf4\x31\x3a\x09\x94\x64\xb5\x10\x3c\x7e\xbc\x1c\x61\x47\x02\x2e\xb0\x68\xef\x01\xb7\xc0\xb1\x95\x3b\x9d\x09\x53\x8e\x89\xb2\x38\x62\x34\x71\x18\x62\x80\xa6\x38\x6f\x91\x98\x29\x88\xd3\x1e\x3a\x27\x4b\xc1\xa6\x64\x0f\xd8\xf2\x5f\x6f\xa1\x17\x49\xbc\xae\xeb\x8e\x44\xd9\x68\x6e\x29\x2b\x13\x07\xc0\x08\x1d\x09\xce\x27\xdc\x2f\x45\x70\x7f\x1a\xd8\xa7\x2c\x4c\x79\x88\x16\x50\xbf\x86\x5d\x10\x4a\x53\x82\x94\x3d\x80\x49\x5a\x6d\x3c\x20\x0e\xd1\xba\x76\x3b\x31\xd6\x3b\xcc\x3a\xdf\xc1\xe4\xa4\x5c\x42\xbd\x4f\x1d\xcd\xed\x58\xf0\x17\x6a\x1d\x35\xce\xe4\x49\x33\xb1\xea\x35\xf7\xce\xc4\x9c\xc6\xba\xeb\x2e\x75\x7b\x67\x8c\xe3\xba\xa5\xed\x38\x77\xc0\xa3\xb1\xe2\x28\xc4\x91\x08\x2b\x4b\x0d\x7c\xd0\xd9\xf4\x17\x7a\xb0\xcf\x9f\x7d\x7a\xc0\x3d\xf0\xe8\x07\xcf\xcd\xcd\x1c\x04\x34\xfc\x23\x0c\xda\x85\xd5\xb7\xc9\x27\x94\xb3\x6e\x63\x1e\x0e\x8d\xf2\xa1\x4d\x4b\x8d\x0a\xd1\x12\xc7\x92\x0d\x4d\xed\x31\x49\x49\x37\x4f\x9e\xab\xcf\xfb\x2e\x1b\x7d\xd0\xe0\x61\x97\x8e\x29\xff\x39\x7d\x11\x47\xd1\x9d\x20\x68\xf3\xe4\xdf\xd9\x4c\x8b\xc8\x27\x41\xd0\x45\xe2\x4c\x3d\xb5\xd6\x32\xc0\x41\xff\x1b\x03\x92\xc9\x68\x32\xd9\x9d\x13\xb1\x27\x9f\x28\xe3\x32\x59\xfe\x49\x15\x46\xd2\x2c\xf8\x54\xed\x28\xfa\x8e\xa7\x7e\xcf\xd4\xb9\x3a\xab\xbd\x0b\xe5\x33\x4e\xe2\xcc\xee\x38\x4e\x37\x66\xf7\xb1\x73\x01\x10\x63\x91\x54\x04\xea\xc2\x79\x5a\x53\xf7\xa0\x97\x82\xfb\xd1\xb6\x3f\x9f\x9f\x3f\x8c\x75\x10\x0a\xf0\x20\x55\xd8\x38\xeb\xb4\xea\x9c\xf4\xa5\x51\x2e\xce\x07\xf3\x33\x19\x5d\x39\x3a\xf1\x2b\xc6\xfc\xf6\x7c\x3b\x1d\x9e\xfc\xa2\xce\x9e\x9d\x46\x94\x77\x2c\xc7\xab\x71\xd9\x8b\x3b\x13\xf1\x04\x50\xf6\x0b\xac\xfb\x4d\x74\x62\xa0\x63\xee\xd3\xe5\x7d\x2f\x8b\x33\x13\x8b\xce\x32\xaf\x81\x6a\xbf\xd1\xdf\xfd\x7e\x5c\xd8\xfc\x5f\xa8\x5a\x57\xfd\x1f\x00\x00\xff\xff\xb3\xd3\x53\x38\x52\x06\x00\x00")

func EnvironmentSetupShBytes() ([]byte, error) {
	return bindataRead(
		_EnvironmentSetupSh,
		"../environment/setup.sh",
	)
}

func EnvironmentSetupSh() (*asset, error) {
	bytes, err := EnvironmentSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../environment/setup.sh", size: 1618, mode: os.FileMode(438), modTime: time.Unix(1649760632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../environment/ami.pkr.hcl": EnvironmentAmiPkrHcl,
	"../environment/setup.sh":    EnvironmentSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"environment": &bintree{nil, map[string]*bintree{
			"ami.pkr.hcl": &bintree{EnvironmentAmiPkrHcl, map[string]*bintree{}},
			"setup.sh":    &bintree{EnvironmentSetupSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
