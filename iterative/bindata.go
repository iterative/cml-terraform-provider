// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../cml/ami-test.json
// ../cml/ami.json
// ../cml/clone-amis.go
// ../cml/setup.sh
package iterative

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _CmlAmiTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x51\x6b\xdb\x30\x10\xc7\xdf\xf3\x29\x84\x9e\x36\x88\xb7\x34\x0f\x5d\xe7\xb7\x10\xfa\x30\x68\xcb\xa0\x85\x31\xc2\x50\x15\xf9\x6a\x1f\x93\x25\xa3\x93\x9c\xb6\xc1\xdf\x7d\xc8\x4e\xd2\x59\xf1\x46\xdf\x42\xee\xe7\x9f\xee\x4e\x7f\xed\x67\x8c\x31\xc6\x5b\xe9\x50\x6e\x35\x10\x67\x39\x1b\xfe\xeb\xff\x47\x43\x5e\x1a\x05\xc2\xbf\x34\x10\x6b\x7c\xbf\x07\xd3\xb2\xc7\xd5\x8f\x7b\xf1\xed\xee\xfe\x61\x75\xb7\xbe\x16\x0f\x3f\xbf\x5f\x3f\x76\x1d\xef\xbf\xeb\xe6\x83\x72\x1b\x50\x17\xe0\x7a\xe3\xe6\x64\x7c\x73\xf7\xd0\x49\x2b\x6b\xf9\x6a\x4d\x06\x5b\xe2\x73\x36\x66\x24\x51\xa8\x41\x38\xab\x81\xe7\x89\xa0\x07\x62\x45\x48\x67\x78\xf4\x38\x93\xcb\x1d\xe5\x28\xeb\x3c\x5f\x5e\x2e\xbe\x5c\x2e\xae\xbe\x2e\xaf\x16\xcb\x3c\x52\x9f\x8b\x56\x65\xaa\xd6\x59\x23\xd5\x6f\x70\x7c\x7e\x2e\x23\x20\x42\x6b\x84\x91\x75\x3c\x8e\xbf\xd1\xd9\xa1\xc4\x47\x1f\x75\x63\x07\x77\x50\x46\x26\xce\x14\x28\xdb\x01\xf9\xec\x22\x39\x87\xcb\x1a\x07\x7f\xa4\xd0\x83\x93\x1e\x5b\xe8\x1b\xf3\x40\x7e\x0a\x2f\x80\x94\xc3\xc6\x1f\xdd\xeb\xdb\x1b\xf6\x61\x6d\x8d\x47\x63\x03\xb1\x5b\xa9\x2a\x34\xc0\x6e\x40\x3a\x83\xa6\xfc\x38\xe5\x28\x9d\x0d\x0d\xf1\x9c\x6d\xb8\xd4\x9a\xff\x4a\x90\x27\xeb\x14\x88\x02\xe2\x04\xe4\xc1\xc5\xe9\xbd\x0b\x90\xaa\x8e\x9c\x06\x0f\x82\x8c\x6c\xa8\xb2\xfe\x5f\x30\x51\x25\x02\x81\x3b\x8d\x1b\xb6\xc1\xf8\x90\x62\xe7\x39\x2b\x97\x9f\x96\xcf\x5a\xba\xf2\x5c\x69\x43\x6c\x20\x4e\xf4\x84\x7a\x68\x74\x22\x15\x43\x8d\x26\x8b\x31\xf1\xe8\x7c\x90\x1a\x5f\x65\xdc\x69\xd6\x9f\x9b\x33\x5e\xb5\xf5\x44\x2a\x18\xe3\xc7\x3c\x8c\xae\x6b\x1a\x75\xd6\xfa\xac\x80\x16\x15\x9c\xbc\x31\xd8\x67\x6c\x37\x91\x3f\xbb\x33\x43\xd7\x1b\xfe\x77\x7c\xd3\xdb\xea\xd9\xda\x92\x17\x0e\x14\x98\xb8\xff\xb8\xfe\xff\x47\x33\x18\xe1\x65\x99\xbc\xf1\x53\x79\x15\x7c\x65\xdd\x38\x93\x49\xd6\x67\xe3\x5f\x87\x9e\x78\xe3\x6c\x8b\xf1\x69\xbc\xeb\xb9\xe7\x8c\x53\x05\x3a\x5d\x1e\x47\xa3\xd1\xc4\xf2\x26\xe9\x8d\x9b\x16\x0b\x94\x19\xd5\x38\xee\x27\x4d\x30\x79\xe9\xe2\x42\xbc\x7b\x11\x1e\x6b\xb0\xa1\xcf\xe5\xc5\x22\xbd\x53\x0e\xcf\x0d\x28\x2f\x0a\x24\x65\x8d\x01\x75\xb6\xbf\xc3\x80\xb3\x6e\xf6\x27\x00\x00\xff\xff\x0e\xdc\x52\xd5\x22\x05\x00\x00")

func CmlAmiTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_CmlAmiTestJson,
		"../cml/ami-test.json",
	)
}

func CmlAmiTestJson() (*asset, error) {
	bytes, err := CmlAmiTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../cml/ami-test.json", size: 1314, mode: os.FileMode(420), modTime: time.Unix(1615402156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _CmlAmiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\x0c\x3a\xb5\x4b\x95\x78\x4d\xc8\x87\xa1\x87\xed\xee\x16\x0a\xbb\x29\x94\xf6\x54\x8a\x51\xec\x59\x5b\xd4\x96\xcc\x8c\xe4\xb4\xbb\xe4\xbf\x17\x39\xb1\x63\x13\xe8\x45\xe0\x99\xa7\xf7\x9e\x66\x9e\xdf\x66\x00\x62\xef\x75\x95\x23\xb1\x48\xe0\xe7\x0c\x00\xe0\xad\x3b\x01\x84\xfb\xdb\xa0\x48\x40\xa8\x5a\xbd\x5a\x23\x71\xcf\xe2\x43\xdf\x53\xcc\xbe\xc6\x94\x6c\x15\x20\xfd\x15\x00\x11\x2a\xa9\x22\xd3\x5d\x24\x93\xa8\x03\x27\x5a\xd5\x49\x12\xaf\xa2\xf5\x2a\xda\x6c\xe3\x4d\x14\x27\x01\xb5\xc8\xdb\x4c\x66\x75\x25\x1b\x95\xfd\x46\x1a\xb8\x01\x04\x23\xb3\xb6\x26\x35\xaa\xee\x1c\x5c\x50\xf2\xdc\x12\x67\xf0\x71\x70\x44\x58\x84\x7a\x02\xc2\xb3\x3c\x20\x3b\x79\x3b\xb2\x5b\xeb\x81\x4c\x3b\x24\xe5\x74\x8b\x41\x7c\x0a\xc9\x91\x33\xd2\x8d\x3b\x13\xdd\x3f\x3f\xc1\xbb\x7b\x6b\x9c\x36\xd6\x33\x3c\xab\xac\xd4\x06\xe1\x09\x15\x19\x6d\x8a\xf7\x73\xf8\xb1\xf7\xc6\x79\xb8\xdd\xcc\xa3\xe5\x94\xaa\x20\xeb\x9b\x6e\xa8\x42\x55\x95\xf8\x35\x34\x5f\x2c\x65\x98\xe6\x18\xfc\xb2\x43\x0a\x42\x8e\x3c\x8a\x2b\x44\x85\x0e\x53\x36\xaa\xe1\xd2\xba\x6b\x18\x73\x99\x7a\x46\xea\xdf\xe5\x3b\x2f\x97\xbe\x36\xec\x94\xc9\x30\xed\xf7\x58\xc4\xf3\xf8\x4f\xa5\xa8\x18\x93\x58\x1f\xc4\x82\xe3\x17\x5d\x9d\xec\x8c\xb6\x79\xaa\xf1\xa4\x08\x20\x5a\x4d\xce\xab\x4a\xbf\xaa\x30\x2a\xd9\x0b\x94\x6d\x3d\xda\x22\x80\x98\x5a\x5b\xe8\x5a\x15\xc8\x8b\x9b\xd3\xa7\xbc\x91\xdd\xdc\xa4\xaa\xf3\xd5\x52\x32\x52\x8b\x24\x6f\xa6\x0c\x64\xad\x93\x39\xb6\x3a\xc3\x41\x26\x04\x71\xc0\x1c\x47\xb1\xb1\x07\x73\x0e\xb2\x88\xb6\xdb\x75\x1c\xdd\x46\xdb\xe5\x7a\x7d\x19\x3e\x80\xa8\x2d\xbb\x94\x30\x43\x13\x46\x1a\x26\x7a\x9d\x24\x6f\x52\xa7\x8a\xe9\xab\xc5\x9d\x77\xa5\xa5\x49\x80\x86\x10\xce\xfa\xb3\x53\x12\x0d\xd9\x56\x87\x94\xfe\xf7\xb7\xe2\x12\xab\x51\xfe\xd0\xb4\x9a\xac\xa9\xd1\xb8\xb4\x55\xe7\x67\x3c\x3c\x7e\xfa\x72\xb7\x4b\x3f\x7f\xfb\xba\xfb\xfe\xb8\x7b\xf8\x68\xac\xd1\x26\xc8\x67\x9d\xfe\x25\x55\xa7\xdc\x06\xda\xf9\x82\xd1\xf9\x66\xce\xa5\xb8\xd8\x9a\x1d\x67\xff\x02\x00\x00\xff\xff\x47\x34\xb5\x2f\xed\x03\x00\x00")

func CmlAmiJsonBytes() ([]byte, error) {
	return bindataRead(
		_CmlAmiJson,
		"../cml/ami.json",
	)
}

func CmlAmiJson() (*asset, error) {
	bytes, err := CmlAmiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../cml/ami.json", size: 1005, mode: os.FileMode(420), modTime: time.Unix(1615402156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _CmlCloneAmisGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x61\x6f\xe3\x28\x13\xfe\x0c\xbf\x82\x17\x6d\x57\x76\x95\x38\x6d\xf6\xd5\xea\x94\x55\xa5\xab\x7a\xd9\x53\xa5\xbb\xbd\x2a\xd5\xdd\x7d\xe8\x55\x15\xc5\xd8\x41\x8b\xc1\x02\x9c\x34\xaa\xf2\xdf\x4f\x80\xed\x62\x37\xe9\x55\x5b\xa9\xc4\x0c\xc3\xcc\xf0\x3c\xc3\xc3\x6c\xd6\x18\x3d\x7b\xe4\x72\xc6\xe4\x06\x95\x0a\xe9\x46\xa2\x0f\x67\x08\x7f\xf8\x19\x7f\x41\xec\x89\x5b\x58\x13\xfa\x9d\x94\x0c\x55\x84\x4b\x08\x79\x55\x2b\x6d\x51\x02\x01\x2e\x2a\x8b\x21\xc0\x42\x95\xee\x47\x19\x37\x9a\x9d\xa4\x18\x42\x80\x4b\x6e\xd7\xcd\x63\x46\x55\x35\x23\x5b\xe3\xfe\xa7\x26\xff\x3e\x2d\x95\xfb\xc4\xff\xe5\x30\x33\xcc\x18\xae\xe4\xdb\x8e\x86\xe9\x0d\xa7\x6c\xc6\xe8\x7c\xe4\xb8\x26\x66\xcd\xa9\xd2\xf5\xcc\x32\xad\x49\xa1\x74\x35\xad\x45\x53\x72\xe9\xf6\xce\x36\xf3\x59\xce\x49\x89\x61\x0a\x61\xd1\x48\xea\xcf\x96\xa4\xe8\x19\x02\xcd\x4a\xae\x24\x5a\x5c\x20\xdc\x98\xe9\x96\x19\x3b\x3d\xc7\x10\x90\x8a\x7f\x23\x15\xf3\x76\x6e\x99\x26\x96\x6f\xd8\x94\x56\x02\x77\x5b\x8c\x5b\xbb\xbb\x37\x56\x73\x59\x3e\x43\x00\xdc\x7e\x46\x8c\x9d\xce\xf1\x24\x9e\x9e\xf7\xd3\x36\xfa\x60\xda\x3a\x93\x7a\x6a\x54\x63\xd7\xdd\x32\xa9\xa7\x52\x69\xbb\xf6\x11\x3e\x1d\xb0\x8d\xf6\xc5\x99\x06\xb6\xf9\x81\xbd\xad\x1f\x25\x53\xca\xa4\xd5\x44\x74\x16\xd6\x1c\xb0\xc4\x55\x77\xd3\xf9\x70\xfa\xa9\x9f\xfa\x24\x9d\xb7\x21\x11\x02\x7b\x08\x81\x63\x79\x82\xdc\xb8\xd4\x5a\x69\x87\x60\x4b\x7c\xf6\x8d\x6d\x6f\xc3\x67\xf2\x91\x6c\x4d\x76\xa5\x64\xc1\x3d\xae\x2b\x0f\xf7\x02\x39\xeb\xad\x47\x3b\x09\x0c\xa4\xfb\x09\x04\x29\x04\xbc\x88\x42\xfe\xef\x02\x49\x2e\x1c\xb3\x40\xa8\x32\xbb\xd1\x5c\xda\x22\xc1\x77\xcb\xd5\xea\x8f\xd5\x3d\x3a\x31\x38\x2a\x20\x85\x00\x28\x93\x2d\x9f\xb8\x4d\xce\xd3\xb6\xc6\x0d\x75\x75\x31\x3a\x77\x35\x25\xce\x37\x85\xbe\x21\x6e\x88\x26\x95\xa7\xfd\xa3\x5b\xfd\x85\x19\xaa\xf9\x23\xbb\xae\x48\xc9\xcc\xb5\xac\x1b\xeb\xb2\x7e\xe5\xc2\x32\x6d\x16\xe8\xee\xfe\xd4\xb9\x85\xb9\x5b\x01\x7e\x00\xae\xaf\x16\x08\xc5\xe7\xc1\x92\x54\x0c\xa7\x13\xbf\xfe\x17\x11\x0d\x0b\xfb\xdb\xe6\x8a\x3c\xdb\xbe\xf4\x47\x07\x20\x8c\xc7\xc3\x12\x4d\xd7\xdc\x32\x6a\x1b\xfd\xbe\xf0\xf8\xe9\xa7\xcf\x0f\x9f\xff\x8f\xe3\xf8\x7b\x4f\x1e\xe0\xfe\x98\x2b\x66\x26\x28\x7c\x2e\x75\x20\x70\x43\x47\x50\x24\x3d\x56\x81\x9c\x17\xf7\x88\x1c\x77\x1f\xb3\xaf\x5a\x55\x4b\xad\x93\xde\x23\x0d\xa9\x0a\x24\x98\x4c\xfa\x8c\x59\x88\x9b\xa2\x8b\x0b\x74\x76\x94\x5a\x52\x71\x74\x62\x90\x54\x16\x15\xaa\x91\x39\x9e\xa0\x0e\xad\x03\x34\x3b\xef\xc5\x05\x1a\xe7\xb8\x3b\xbb\x87\x10\x6c\x88\x46\xdb\x12\x39\x71\xcb\xfe\x26\xdc\xfe\xaa\x55\x53\x43\x50\x28\x8d\x1e\x26\x28\x67\xc6\x72\x49\x6c\xab\x1b\x9a\xc8\x92\xa1\x4e\x14\x5c\x75\xdb\x32\xbb\xcc\x73\x9f\x0a\x94\x0a\x39\xc5\x49\xa2\x4d\xa1\xa1\x51\x40\xdf\x8b\x10\x00\x45\x65\xfb\x03\x5d\x09\x25\xb9\x2c\x43\x6d\xc8\xaa\x36\x36\x3a\x31\x59\x96\xfd\x23\xf1\xa0\x82\x10\xcc\x65\x72\xb0\xb1\xc0\x09\x15\x4a\x06\x32\xda\xab\x72\x60\xcb\x04\x9d\x92\x8a\x87\x63\x5f\xe7\xed\xcc\xa1\xd5\x7e\x06\x4e\x6b\xb7\x21\xfd\xe2\x03\x47\xec\x0d\x0b\x0e\x37\x8f\x1e\x2d\xfb\x8d\x9a\x5f\xe2\x08\x99\x30\xad\x33\x1f\x2b\x49\xc3\x62\x4c\x1a\x70\x9d\x31\xcc\xeb\x6b\x47\xa6\xa1\x94\x19\x53\x34\x42\xec\xc2\xc9\xf3\x77\x66\xdf\xc7\xac\x84\xd6\xdb\x96\x9e\xf0\x24\x85\xfb\xf6\xa9\x88\xb0\x34\xaa\xd1\x94\x0d\xe8\x3b\x10\xb9\x5f\xe1\x01\x5a\x26\x2d\x2f\x38\xd3\x43\xbb\x7f\x5d\x06\x96\x08\xf0\xbe\x37\x98\x47\xf6\xb9\x53\xce\x87\x1f\x56\xcc\xd7\xe7\x0f\xe2\x79\x54\xef\xa8\xaa\x77\x2b\x66\x1a\x61\x27\x5d\x57\xb9\x9b\x7e\xa5\xea\x5d\x00\xc3\x6b\x60\x3f\xed\xe5\xef\xd6\x63\xd4\x76\xd5\xa0\x84\x11\x1c\x5e\x8e\x6e\x23\x44\x17\x03\xed\x8a\xb1\xf6\xae\x9d\xbe\xb5\x7f\xe3\xc0\xfe\x9e\x3b\xbf\x08\xc6\xc5\x01\xbf\xb8\xad\x9d\xb0\x05\x89\x1a\xb5\xb7\x66\xb6\xd1\xd2\x59\xfb\x37\xc1\xb7\xc5\x9f\xd2\x72\xe1\xcf\xb6\x7c\xe2\xc6\x9a\xe4\xad\x87\xa0\xc5\xe0\x98\xd4\x9e\xbe\x20\xdc\x5d\xc2\xa0\xba\x3f\xf4\x80\x18\x4b\xec\x3b\x25\x9e\x6c\x08\x17\xe4\x51\xb0\xd7\x2a\xef\x88\x7f\x98\xa0\x4a\xe5\xbc\xd8\x45\xfa\xfe\xbb\x37\xf8\x2a\x2f\xad\xd5\xfc\xb1\xb1\x6d\x03\x1c\x5a\x19\x23\x30\xe8\x82\x43\xc7\x76\xf9\x7f\x23\x8d\xa4\xeb\x1b\xa6\x2b\xee\x7b\x7a\x11\x1e\xd9\xb1\xd9\xe7\xe3\xd4\x37\xb2\xf1\x70\x5c\xe6\x79\x0f\xd5\xd8\x3b\xe0\x15\x46\xe0\x45\x7c\x31\x7c\x1f\x85\xe8\x30\x7b\x0d\x85\xeb\x8b\x17\x24\x8e\x76\x47\x37\x95\x5c\xc0\x3d\xfc\x37\x00\x00\xff\xff\x81\xaa\x7d\x14\x60\x0b\x00\x00")

func CmlCloneAmisGoBytes() ([]byte, error) {
	return bindataRead(
		_CmlCloneAmisGo,
		"../cml/clone-amis.go",
	)
}

func CmlCloneAmisGo() (*asset, error) {
	bytes, err := CmlCloneAmisGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../cml/clone-amis.go", size: 2912, mode: os.FileMode(493), modTime: time.Unix(1627337013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _CmlSetupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\xd4\x3a\x10\x7d\xbe\xf9\x15\x73\x73\xab\xf6\xf2\xe0\xa4\x5b\x55\x08\x52\x15\xa9\xa8\x1f\xaa\x54\x15\x04\x7d\x41\x6d\xb5\x72\xec\x49\x62\x36\xb1\x23\xcf\x78\x21\x12\x3f\x1e\x25\xd9\x8f\x2c\x54\x40\x79\xc8\x8b\xe7\x9c\x33\x99\x33\x1f\xff\xa5\xb9\xb1\x29\x55\x51\x74\x79\x7d\x73\x71\x9a\x2e\xa5\x4f\x6b\x57\xa6\xaa\xa9\xe7\xc4\x52\x2d\x92\xda\x95\x91\x29\xe0\x1e\xfe\x05\x51\x40\xbc\xd7\xe3\x62\x78\x3c\x01\xae\xd0\x46\x00\x00\xe7\x17\x6f\xaf\xcf\x6e\xe7\x97\x1f\xde\xdd\xde\x5d\xdc\x9e\x9f\x5a\x67\x8d\x65\xf4\x52\xb1\x59\xe2\x00\x41\x55\x39\x88\xcf\xde\xdf\x65\xd9\x15\x72\x96\x9d\x11\x85\x06\xc5\x27\x24\x78\x88\xd9\x07\x7c\x88\x4f\x62\xf8\x06\x14\xb4\x03\x46\x04\x21\x21\x45\x56\xa9\x6c\xb9\xff\x12\xe5\x6c\x91\xe8\xf4\xf5\xa1\x1c\x98\x1d\x52\x34\x08\x0f\x04\xd9\x32\x78\x6c\xdc\x12\x21\x58\xc9\x8c\x56\xa3\x16\xa1\x2d\xbd\xd4\x48\x23\xae\x23\xc6\x46\x71\x0d\xda\x90\xcc\x6b\xec\x49\x42\x4b\x53\x77\x6b\x60\x42\xe8\x97\x46\x21\x4c\x95\xb5\x16\x3d\xd0\x63\xeb\xc8\xb0\xf3\x1d\x04\x6b\x96\xe8\x09\x41\x74\xbf\xc4\xb5\xad\xcc\x4a\xc3\x42\x39\x8f\x69\xdb\xca\x5d\x7c\xcb\x10\x5a\x2d\x19\x61\x7f\x7f\xf3\x24\x4a\x64\x30\x96\x58\xd6\x35\x88\x0e\x4a\xc3\x5b\x8a\x0a\xbe\x06\x51\xd0\xc7\x1b\xa8\x98\x5b\xca\xd2\xb4\x44\x4e\xb4\x53\x0b\xf4\x89\x72\x0d\x08\x07\x25\xb2\x58\xbd\x50\xb5\x91\xa6\xea\xe7\xc0\xc3\x56\x39\x10\xfa\xc6\x69\x10\xf2\x0a\x46\x0c\x84\x3c\x58\x0e\x5b\x08\x21\x17\x52\xd5\x20\x44\xe3\xb4\x29\xba\x81\x93\x8d\xa8\xcc\x7f\x81\x61\x6e\x7c\xb0\xe9\x3a\x87\x53\x8b\xd1\xc6\x27\x7e\xbb\xef\xa7\xc7\x1a\x25\x21\x25\x95\xa4\xca\x28\xe7\xdb\xbe\x84\xb4\x6c\xcb\xf5\x14\xf4\x7e\x2c\xb0\xeb\xad\x05\xb1\xe3\x9c\xe8\xdd\x9e\x38\x1d\x6b\xcc\xe1\x5e\x7a\x55\x9d\xca\x46\xbf\x3c\x7e\xfc\x83\x4c\xb0\xf7\x7f\x4d\xf9\x7c\x15\x04\xa1\xe8\x05\x34\xd2\xd8\xf8\xb9\x3d\x62\xf4\x5e\x16\xce\x37\xd3\x72\x69\x5b\xac\xc6\x3c\xb1\x4e\x23\xb9\xe0\x15\x0e\x45\x12\x72\x68\xe7\xb3\xa3\xe4\xeb\xba\xd6\x5c\x52\xf5\xdc\xc4\xbd\xe8\xe7\x1f\xb7\x60\x12\x1f\x9b\x23\xb4\x1f\xc6\x55\x28\xd7\x34\xce\xee\x8e\xd4\x2e\x04\x64\x60\xb7\x16\xd8\xa9\x06\xc4\xb6\x1e\xbb\x34\xda\xc8\xa4\x34\x5c\x85\x3c\x31\x6e\xf5\xb0\x1a\xae\xbe\x81\x7d\xd3\x9e\xea\x21\xfc\xa5\xe4\xf8\x97\xb3\x57\xc9\xe1\xf1\x6e\x24\xa9\x0d\xf1\xf4\x68\x6c\x2e\xc6\x68\x36\x0d\x80\x44\x3f\xc1\xfa\x9d\xd9\x3b\x46\x4f\xd9\x47\x93\x9d\xd8\x9c\x14\x8f\xc4\xd2\xf3\x6a\x79\xb6\x88\x15\x93\x1a\xb3\x7d\x5b\x2d\x98\x0f\x16\x84\xf0\x0d\x08\x51\xb6\x81\xa0\xcf\x35\xc2\x53\x15\xb4\xcc\x66\xb3\xe4\x50\xe4\xfd\x68\x4e\x44\xa2\x7f\x86\x3b\x7a\xa0\x9a\x1a\x86\xe3\x0c\x6e\x71\x00\x6f\x60\xb8\xc9\x51\x61\xa2\xef\x01\x00\x00\xff\xff\x88\x6a\x10\x7f\xce\x05\x00\x00")

func CmlSetupShBytes() ([]byte, error) {
	return bindataRead(
		_CmlSetupSh,
		"../cml/setup.sh",
	)
}

func CmlSetupSh() (*asset, error) {
	bytes, err := CmlSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../cml/setup.sh", size: 1486, mode: os.FileMode(493), modTime: time.Unix(1627340560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../cml/ami-test.json": CmlAmiTestJson,
	"../cml/ami.json":      CmlAmiJson,
	"../cml/clone-amis.go": CmlCloneAmisGo,
	"../cml/setup.sh":      CmlSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"cml": &bintree{nil, map[string]*bintree{
			"ami-test.json": &bintree{CmlAmiTestJson, map[string]*bintree{}},
			"ami.json":      &bintree{CmlAmiJson, map[string]*bintree{}},
			"clone-amis.go": &bintree{CmlCloneAmisGo, map[string]*bintree{}},
			"setup.sh":      &bintree{CmlSetupSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
