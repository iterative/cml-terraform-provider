// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../environment/ami.pkr.hcl
// ../environment/setup.sh
package iterative

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _EnvironmentAmiPkrHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x10\xc4\x1e\xda\xa0\x94\x65\x35\x1b\xc7\x06\xd2\x02\x5d\xf4\xb6\xe9\xad\xa7\x20\x10\xc6\xd2\x58\x22\x4a\x91\x2a\x3f\x94\x66\x03\xff\xf7\x82\xa4\x64\x7d\x38\xd9\xe3\x06\xc8\xc1\x6f\x1e\x67\x86\xc3\xf7\x46\x1d\x94\xff\xa0\x26\x6f\x09\x21\x1a\xff\x75\x5c\x63\x55\x74\xc2\xd5\x5c\x9a\x00\x12\x02\x2d\x7c\x53\x92\x3c\x0c\x3f\x09\xe9\x51\x1b\x1e\x10\xfa\xdb\x03\xd9\xa6\x59\x9a\xd1\x21\x64\x94\xd3\x25\x12\x1f\xaa\xb9\x6d\xdc\x31\x2d\x55\xbb\x69\xc0\x34\xbc\x54\xba\xdb\xc4\x5c\x91\x7d\x4e\xfc\xff\x39\x49\x7a\xd0\x1c\x8e\x02\x63\x41\xde\x42\x8d\x85\x84\x16\xc9\xf0\xf7\x40\x28\xb7\xa8\xc1\xf2\x1e\x59\xd9\x0a\x7a\x61\x55\x68\x4a\xcd\x3b\x3b\x74\xf3\xe5\xf1\x2b\xf9\xe9\x8b\x92\x96\x4b\xa7\x9c\x21\x8f\x50\x36\x5c\x22\xf9\x8a\xa0\x25\x97\xf5\xcf\xe4\xef\xa3\x93\xd6\x91\xed\x7d\x9a\xdd\xd2\xeb\xda\xf0\x62\x8a\xa3\xe3\xa2\x2a\x34\xd6\x3e\xe9\xa5\x01\x67\xd8\x0b\x1a\xcb\xb6\x74\x41\xe3\xd2\x58\x90\x25\x8e\xb4\x3a\x4f\xf3\xff\x04\xe8\x1a\x97\x3c\x17\xea\x16\xa1\x6b\xcf\xbb\x89\x00\xbb\x61\xa1\x15\x06\x6d\x75\x77\xcb\x0c\xea\x1e\x35\xbb\xf9\xa0\x33\xad\x04\x16\x06\x8d\x1f\x7e\x1c\xd0\x03\xa1\x65\x2b\x58\x7c\x43\x36\x84\xe8\x9c\x0e\x7a\xbc\x44\x6c\x10\xb4\x3c\xc0\x8b\x39\x70\x68\x0f\x87\xfc\x2e\xdb\xdd\x65\xf7\xfb\xfc\x3e\xcb\x0f\x9e\xbe\x99\xb2\x8d\x59\x8c\x3b\x4a\xb4\x05\xaf\xe6\x59\x22\xc8\xb2\xfd\xa9\x84\xec\xfe\x76\xbb\x2f\xf3\x53\xf6\x79\xf7\xf9\x72\x08\x4b\xa7\xb9\x7d\x2d\x6a\xad\x5c\xe7\x0f\xfb\x43\x35\xcb\x8e\xbb\xea\xb4\xab\xf6\xa7\x7d\x96\x97\xb0\xc3\x32\xdc\x54\xa8\x12\xc4\x74\x4d\x0b\xb5\xb9\xa8\xed\x11\x24\xd4\x58\xfd\xf1\x1a\x0b\x4f\xbd\x11\xf2\xd7\x42\x22\x3d\xe8\x74\x92\x4e\x20\xfc\x29\x7b\xae\x95\x6c\x51\xda\x70\x56\xab\x8a\x26\x51\x77\x61\x3e\x28\x10\x0c\x0e\x4f\xed\x4b\x3e\x85\x63\x14\x4e\xcc\x28\x67\x1b\xb6\xa5\xbf\x0c\x48\xc7\x10\xc2\xeb\x4f\x80\x54\xda\x36\xdf\x41\xf3\x77\xd1\x5f\x67\xe8\x75\x91\x80\x5c\xe5\x9c\xd0\x4b\xce\x12\x58\x89\xd2\x6a\x10\x13\x13\xdd\xbb\x58\xa8\xbd\x40\x56\x75\xd1\x8d\xd2\x5e\x01\xf9\x1a\xb8\x34\xdf\xe2\x3a\x89\x81\xd5\x84\x9c\xf9\x00\xc8\x67\xc0\xb2\xee\x08\xe4\xfe\x95\x9e\xbd\x32\x2a\xb0\x40\x68\x5c\x1a\x0c\x5a\x4e\x09\x8d\xc6\xa1\xc3\xc2\x9a\x4c\x1a\x15\xb0\x36\x70\x42\x88\x7a\x91\xa8\xcd\x48\x7a\xa2\xd9\x7e\xbf\xcb\xb3\x6d\xb6\xbf\xdd\xed\xe8\x73\x42\x48\xab\x8c\x2d\x34\x96\x51\x26\x56\x3b\x4c\x12\x42\x4e\x5c\x58\x7f\x6e\x14\xe2\x7c\x21\xcd\x9c\x10\xdb\xd9\x04\xe5\x99\xcd\xa7\xb7\x65\x13\x73\xdb\x9f\xa3\x6a\xb5\x52\x96\x55\xd8\xf3\x12\x99\x7d\xed\x70\xc8\x83\x47\x13\xe3\x3d\xd7\xd6\x81\xe0\xdf\xc0\x6f\xb5\x48\x79\x20\xb4\xe9\xdb\xa8\x5d\x2f\x5e\x63\x5c\x8b\xc1\xdf\x43\x73\x0b\xab\x4f\x93\x18\xe1\xc0\x59\x2d\x8e\x05\x67\x1e\x1b\xb7\xf2\xb0\xca\xc7\xe9\xfb\x06\x09\x8d\x60\x9c\x3e\xb4\x3c\xfa\x7b\x36\x5c\x10\x22\xcc\xd4\xc7\xe4\x95\x3f\x2d\x1a\x4b\x7e\x27\x34\x8e\x69\x72\xeb\x99\xf9\x08\x25\x87\x6b\x17\xfb\x44\xcb\x2d\x3f\x51\x66\xf8\xc0\x1c\xad\x7c\x55\xf2\x29\xec\x98\x2b\x79\x3c\x93\x03\x99\x22\xab\x85\x90\xac\x14\xf6\x1d\x8d\x8d\x9f\x81\x62\x78\xae\x25\x6d\x8c\xfa\x84\x71\x80\x05\xb4\x3c\x26\xf4\x0a\x4f\x27\x81\xa7\x51\x31\x29\xaf\x3c\xd7\x34\x85\x33\xa8\xe3\x20\x2f\x62\xa3\x21\xcf\x3b\x1b\x76\xac\x7a\x15\xf3\xfc\x77\xd6\xf8\x85\x3f\xc6\x82\xee\x95\xef\xaf\x42\x81\x16\x0b\x23\xa1\x33\x8d\xba\xf8\x62\x0a\xfb\xab\x1b\x8b\x7a\xcc\x35\xda\x26\x2c\xef\x85\x45\xa6\xf9\xfa\x98\x9f\xa9\x93\xc5\x9c\xf6\x01\xa5\x57\xc2\xab\x7c\xf8\x1a\xac\x28\x3f\xcc\x05\xe1\x05\x43\xfe\xf8\x72\xe1\x33\x31\xd8\x20\x9d\xac\x91\x0e\xc6\x78\xf6\x9d\x75\x5a\xf5\xdc\x67\x42\x4d\xa8\x69\x50\x08\x3a\x74\x18\xf5\xea\x9f\xf2\xd3\x5b\x07\xb6\x49\xfd\x36\x38\x6f\x0c\x5a\xd7\xa5\xa6\xa1\x43\xd5\xff\x03\x00\x00\xff\xff\xab\x43\xbc\x8c\x94\x09\x00\x00")

func EnvironmentAmiPkrHclBytes() ([]byte, error) {
	return bindataRead(
		_EnvironmentAmiPkrHcl,
		"../environment/ami.pkr.hcl",
	)
}

func EnvironmentAmiPkrHcl() (*asset, error) {
	bytes, err := EnvironmentAmiPkrHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../environment/ami.pkr.hcl", size: 2452, mode: os.FileMode(438), modTime: time.Unix(1645542906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _EnvironmentSetupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4f\x6f\xdc\xb6\x13\xbd\xeb\x53\xcc\x6f\x7f\x41\xd0\x1e\x86\x72\xdc\xb8\x7f\x36\xf0\xc1\x45\x9c\x20\x68\xe0\x14\x6d\x2e\x45\x12\x18\x14\x39\x92\x58\x53\x24\xc1\x19\xae\xb3\x45\x3f\x7c\x21\xad\x56\xbb\x8b\xa6\x46\x7c\xd0\x85\xf3\xde\x70\x66\xde\xe3\xe8\xff\x75\xe3\x42\xcd\x7d\xf5\xea\xcd\xdb\xeb\xcb\x7a\xa3\x73\xed\x63\x57\x9b\xc1\xdf\xb2\x68\x73\xa7\x7c\xec\x2a\xd7\xc2\x07\xf8\x1f\x60\x0b\xab\x27\x23\x6e\x05\x9f\x5e\x80\xf4\x14\x2a\x80\x97\xd7\x3f\xbf\xb9\xba\xb9\x7d\xf5\xdb\xbb\x9b\xf7\xd7\x37\x2f\x2f\x43\x0c\x2e\x08\x65\x6d\xc4\x6d\xa8\x02\x20\xd3\x47\x58\x5d\xfd\xfa\x7e\xbd\x7e\x4d\xb2\x5e\x5f\x31\x97\x81\xf0\x0f\x62\xf8\xb8\x92\x5c\xe8\xe3\xea\xc5\x0a\xfe\x06\x2e\x36\x82\x10\x01\x6a\xa8\x49\x4c\xad\x93\x8c\x9f\x32\x31\xb4\xca\xd6\x3f\x9d\xe9\x89\xb9\x25\xae\x2a\xd8\xc1\x75\x12\xc8\x34\xc4\x0d\x41\x09\x5a\x84\x82\x25\x8b\x25\x75\x59\x5b\xe2\x11\xb5\x65\xa1\xc1\x88\x07\xeb\x58\x37\x9e\x46\x0a\x5a\xed\xfc\x76\x0f\x53\x4c\x79\xe3\x0c\x1d\x92\x5a\x8b\x23\x2a\x53\x8a\xec\x24\xe6\x2d\x94\xe0\x36\x94\x99\x00\xb7\x0f\xa0\x52\xd2\xeb\xce\x09\x9a\x98\xa9\x4e\x49\x1f\xa3\x93\x40\x49\x56\x0b\xc1\xd3\xa7\xcb\x11\x76\x24\xe0\x02\x8b\xf6\x1e\x70\x0b\x1c\x5b\xb9\xd7\x99\x30\xe5\x98\x28\x8b\x23\x46\x13\x87\x21\x06\x68\x8a\xf3\x16\x89\x99\x82\x38\xed\xa1\x73\xb2\x14\x6c\x4a\xf6\x80\x2d\xff\xfe\x16\x7a\x91\xc4\xeb\xba\xee\x48\x94\x8d\xe6\x8e\xb2\x32\x71\x00\x8c\xd0\x91\xe0\x7c\xc2\xfd\x52\x04\xf7\xff\x0a\x54\x00\x73\xde\xc2\x94\x87\x68\x01\xf5\x6b\xd8\x21\xa0\x34\x25\x48\xd9\x5f\xcc\x24\xad\x36\x1e\x10\x87\x68\x5d\xbb\x9d\x18\xeb\x1d\x66\x9d\xef\x61\xb2\x53\x2e\xa1\xde\xe7\x8f\xe6\x6e\xac\xfa\x0b\x05\x8f\x42\x67\xf2\xa4\x99\x58\xf5\x9a\x7b\x67\x62\x4e\x63\xf1\x75\x97\xba\xbd\x3d\xc6\x99\xdd\xd1\x76\x1c\x3e\xe0\xd1\x6c\x71\x54\xe3\x48\x89\x95\xa5\x06\x3e\xe8\x6c\xfa\x4b\x3d\xd8\xef\x9f\x7f\xfa\x8a\x7b\xe0\xc9\x37\x9e\x9b\xdb\x39\x08\x68\xf8\x5b\x18\xb4\x0b\xab\xc7\x69\x28\x94\xb3\x6e\x63\x1e\x0e\x8d\xf2\xa1\x4d\x4b\x8d\x0a\xd1\x12\xc7\x92\x0d\x4d\xed\x31\x49\x49\xb7\xcf\xce\xd5\xe7\x7d\x97\x8d\xe6\xfe\x71\x97\x8e\x29\xff\x3c\x7d\x16\x47\xd1\x9d\x20\x68\xf3\x64\xe2\xd9\x51\x7b\xec\x69\x10\x74\x91\x38\x53\x4f\xfd\xb5\x0c\x70\xd0\x7f\xc5\x80\x64\x32\x9a\x4c\x76\x67\x47\xec\xc9\x27\xca\xb8\x4c\x96\xbf\x53\x85\x91\x34\x0b\x9e\xab\x1d\x45\xdf\xf3\xd4\xef\x99\xba\x50\x67\xb5\x77\xa1\x7c\xc6\x49\x9c\xd9\x1d\xc7\xe9\xc6\xec\x3e\x76\x2e\x00\x62\x2c\x92\x8a\x40\x5d\x38\x4f\xbb\xea\x01\xf4\x52\x70\x3f\xda\xf6\x87\x8b\x8b\xaf\x63\x1d\x84\x02\x3c\x48\x15\x36\xce\x3a\xad\x3a\x27\x7d\x69\x94\x8b\xf3\xc1\xfc\x56\x46\x57\x8e\x4e\xfc\x0f\x63\x3e\x3e\xdf\x4e\x87\x67\x3f\xaa\xb3\xe7\xa7\x11\xe5\x1d\xcb\xf1\x7e\x5c\x96\xe3\xce\x44\x3c\x01\x94\xfd\x02\xeb\x61\x13\x9d\x18\xe8\x98\x7b\xbe\xbc\xef\x65\x7b\x66\x62\xd1\x59\xe6\x35\x50\xed\xd7\xfa\xbb\x5f\x8e\x0b\x9b\x7f\x0e\x55\xeb\xaa\x7f\x02\x00\x00\xff\xff\x03\x42\x22\x15\x57\x06\x00\x00")

func EnvironmentSetupShBytes() ([]byte, error) {
	return bindataRead(
		_EnvironmentSetupSh,
		"../environment/setup.sh",
	)
}

func EnvironmentSetupSh() (*asset, error) {
	bytes, err := EnvironmentSetupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../environment/setup.sh", size: 1623, mode: os.FileMode(438), modTime: time.Unix(1645542902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../environment/ami.pkr.hcl": EnvironmentAmiPkrHcl,
	"../environment/setup.sh":    EnvironmentSetupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"environment": &bintree{nil, map[string]*bintree{
			"ami.pkr.hcl": &bintree{EnvironmentAmiPkrHcl, map[string]*bintree{}},
			"setup.sh":    &bintree{EnvironmentSetupSh, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
